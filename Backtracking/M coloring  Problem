Given an undirected graph and an integer M. The task is to determine if the graph can be colored with at most M colors such that no two adjacent vertices of the graph are colored with the same color. Here coloring of a graph means the assignment of colors to all vertices. Print 1 if it is possible to colour vertices and 0 otherwise.

Example 1:

Input:
N = 4
M = 3
E = 5
Edges[] = {(1,2),(2,3),(3,4),(4,1),(1,3)}
Output: 1
Explanation: It is possible to colour the
given graph using 3 colours.


bool issafe(vector<int>A[],int I,int i,int C[])
{
     for(auto X:A[I])
     {
         if(C[X]==i)
         {
             return false;
         }
     }
     return true;
}
bool color(int I,vector<int>A[],int V,int m,int C[])
{
      if(I==V)
      {
          return true;
      }
      for(int i=1;i<=m;i++)
      {
          
          if(issafe(A,I,i,C))
          {  
              C[I]=i;
              if(color(I+1,A,V,m,C))
              {
                  return true;
              }
              C[I]=-1;
          }
      }
      return false;
}
bool graphColoring(bool graph[101][101], int m, int V)
{           
    vector<int>A[V];
    int C[V];
    for(int i=0;i<V;i++)
    {
        C[i]=-1;
    }
    for(int i=0;i<V;i++)
    { 
        for(int j=0;j<V;j++)
        {
            if(graph[i][j])
            {
                A[i].push_back(j);
            }
        }
    }
    return color(0,A,V,m,C);
}