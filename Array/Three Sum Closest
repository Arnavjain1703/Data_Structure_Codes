Given an array Arr of N numbers and another number target, find three integers in the array such that the sum is closest to target. Return the sum of the three integers.

Example 1:

Input:
N = 6, target = 2
A[] = {-7,9,8,3,1,1}
Output: 2
Explanation: There is one triplet with sum
2 in the array. Triplet elements are -7,8,
1 whose sum is 2.


class Solution{
  public:
    int threeSumClosest(vector<int> arr, int target) {
        int C=INT_MAX;
        int V;
        int X;
        int n=arr.size();
        sort(arr.begin(),arr.end());
        for(int i=0;i<=n-3;i++)
        {
            int J=i+1;
            int h=n-1;
            
            while(J<h)
            {
                X=arr[i]+arr[J]+arr[h];
                if(C>abs(X-target))
                {
                    C=abs(X-target);
                    V=X;
                }
                else 
                {
                    if(C==abs(X-target))
                    {
                        if(X>V)
                        {
                            V=X;
                        }
                    }
                }
                if(X>target)
                {
                    h--;
                }
                else if(X<target)
                {
                    J++;
                }
                else
                {
                    return X;
                }
            }
        }
        return V;
    }
};
