Given an integer array nums, return the number of reverse pairs in the array.

A reverse pair is a pair (i, j) where 0 <= i < j < nums.length and nums[i] > 2 * nums[j].

 

Example 1:

Input: nums = [1,3,2,3,1]
Output: 2
Example 2:

Input: nums = [2,4,3,5,1]
Output: 3
 

Constraints:

1 <= nums.length <= 5 * 104
-231 <= nums[i] <= 231 - 1






int merge(int I,int mid,int J,vector<int>&nums)
    {
       int count=0;
       long long I1=0;
       long long J1=0;
       long long n1=mid-I+1;
       long long I2=I;
       long long n2=J-mid;
       long long B[n1+n2];
       long long K=0;
       long long x=mid+1;
       while(I2<(n1+I) && x<(n2+mid+1))
       {
           long long A=nums[I2];
           long long B=nums[x];
           B=B*2;
           if(A<=B)
           {
               I2++;
           }
           else
           {
               count+=n1+I-I2;
               x++;
           }
       } 
       while(I1<n1 && J1<n2)
       {
           if(nums[I1+I]<=nums[J1+mid+1])
           {
               B[K]=nums[I1+I];
               I1++;
           }
           else
           {
               B[K]=nums[J1+mid+1];
               J1++;
           }
           K++;
       }
       while(I1<n1)
       {
           B[K]=nums[I1+I];
           I1++;
           K++;
       } 
        while(J1<n2)
        {
            B[K]=nums[J1+mid+1];
            J1++;
            K++;
        }
        for(int i=0;i<n1+n2;i++)
        {
            nums[I+i]=B[i];
        }
        return count;
    }
    int divide(int I,int J,vector<int>&nums)
    {
        int count=0;
        if(I==J)
        {
            return 0;
        }
        int mid=(I+J)/2;
        count+=divide(I,mid,nums);
        count+=divide(mid+1,J,nums);
        count+=merge(I,mid,J,nums);
        return count;
    }
    int reversePairs(vector<int>& nums) {
        int count=0;
        count=divide(0,nums.size()-1,nums);
        return count;
    }