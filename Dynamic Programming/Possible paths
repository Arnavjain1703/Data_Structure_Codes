Given a directed graph and two vertices ‘u’ and ‘v’ in it. Find the number of possible walks from ‘u’ to ‘v’ with exactly k edges on the walk modulo 109+7.
 

Example 1:

Input 1: graph = {{0,1,1,1},{0,0,0,1}, 
{0,0,0,1}, {0,0,0,0}}, u = 0, v = 3, k = 2
Output: 2
Explanation: Let source ‘u’ be vertex 0, 
destination ‘v’ be 3 and k be 2. The output 
should be 2 as there are two walk from 0 to 
3 with exactly 2 edges. The walks are {0, 2, 3}
and {0, 1, 3}.

int MinimumWalk(vector<vector<int>>&graph, int u, int v, int k){
	    vector<int>adj[graph.size()];
	    for(int i=0;i<graph.size();i++)
	    {
	        for(int j=0;j<graph.size();j++)
	        {
	            if(graph[i][j])
	            {
	             adj[i].push_back(j);   
	            }
	        }
	    }
	    int n=graph.size();
	    int dp[graph.size()][k+1];
	    for(int i=0;i<n;i++)
	    {
	        for(int j=0;j<=k;j++)
	        {
	            dp[i][j]=0;
	        }
	    }
	    dp[u][0]=1;
	    for(int j=0;j<k;j++)
	    {
	        for(int i=0;i<n;i++)
	        {
	            if(dp[i][j])
	            {
	                for(auto X:adj[i]){
	                   dp[X][j+1]+=dp[i][j];
	                   dp[X][j+1]%=1000000007;
	                }
	            }
	        }
	        
	    }
	    
	    return dp[v][k];
	}