Ivar the Boneless is a great leader. He is trying to capture Kattegat from Lagertha. The war has begun and wave after wave Ivar's warriors are falling in battle.

Ivar has n warriors, he places them on a straight line in front of the main gate, in a way that the i-th warrior stands right after (i−1)-th warrior. The first warrior leads the attack.

Each attacker can take up to ai arrows before he falls to the ground, where ai is the i-th warrior's strength.

Lagertha orders her warriors to shoot ki arrows during the i-th minute, the arrows one by one hit the first still standing warrior. After all Ivar's warriors fall and all the currently flying arrows fly by, Thor smashes his hammer and all Ivar's warriors get their previous strengths back and stand up to fight again. In other words, if all warriors die in minute t, they will all be standing to fight at the end of minute t.

The battle will last for q minutes, after each minute you should tell Ivar what is the number of his standing warriors.

Input
The first line contains two integers n and q (1≤n,q≤200000) — the number of warriors and the number of minutes in the battle.

The second line contains n integers a1,a2,…,an (1≤ai≤109) that represent the warriors' strengths.

The third line contains q integers k1,k2,…,kq (1≤ki≤1014), the i-th of them represents Lagertha's order at the i-th minute: ki arrows will attack the warriors.

Output
Output q lines, the i-th of them is the number of standing warriors after the i-th minute.

Examples
inputCopy
5 5
1 2 1 2 1
3 10 1 1 1
outputCopy
3
5
4
4
3




void solve()
{
  ll N,q;
  cin>>N>>q;
  ll A[N];
  ll A2[N];
  ll K[q];
  ll SUM[N];
 
  for(ll i=0;i<N;i++)
  {
      cin>>A[i];
  }
  SUM[0]=A[0];
  for(ll i=1;i<N;i++)
  {
    SUM[i]=SUM[i-1]+A[i];
  }
  for(ll j=0;j<q;j++)
  {
    cin>>K[j];
  }
  ll J=0;
  ll I=0;
  ll L=0;
  while(J<q)
  {
     ll M=K[J]+L;
     ll Z=0;
     if(I>0)
     {
      Z=SUM[I-1];
     }
     ll G=lower_bound(SUM+I,SUM+N,M+Z)-SUM;
     
     if(G==N)
     {
       // cout<<I<<" "<<M<<" "<<G<<" "<<3<<'\n';
       cout<<N<<'\n';
       L=0;
       I=0;
     }
     else
     {  
        ll Y;
        if(I!=0)
        {
          Y=SUM[G]-SUM[I-1];
        }
        else
        {
          Y=SUM[G];
        }
        if(Y==M)
        {
          // cout<<I<<" "<<M<<" "<<G<<" "<<0<<'\n';
          I=G+1;
          L=0;
          if(I==N)
          {
            cout<<N<<'\n';
            I=0;
          }
          else
          {
            cout<<N-I<<'\n';
          }
        }
        else
        {
          // cout<<I<<" "<<M<<" "<<G<<" "<<1<<'\n';
          L=A[G]-(Y-M);
          I=G;
          cout<<N-I<<'\n';
        }
        
     }
    J++;
  }
}
int main() {
    FASTIO
    #ifndef ONLINE_JUDGE
        freopen("inputf.in","r",stdin);
        freopen("outputf.in","w",stdout);
    #endif  
   // int t; cin>>t ; while(t--)
     solve();
}