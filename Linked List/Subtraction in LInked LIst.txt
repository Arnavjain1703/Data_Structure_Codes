// driver

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
using namespace std;

/* Linked list Node */
struct Node {
    int data;
    struct Node* next;
    Node(int x) {
        data = x;
        next = NULL;
    }
};

struct Node* buildList(int size)
{
    int val;
    cin>> val;
    
    Node* head = new Node(val);
    Node* tail = head;
    
    for(int i=0; i<size-1; i++)
    {
        cin>> val;
        tail->next = new Node(val);
        tail = tail->next;
    }
    
    return head;
}

void printList(Node* n)
{
    while(n)
    {
        cout<< n->data << " ";
        n = n->next;
    }
    cout<< endl;
}

Node* subLinkedList(Node* l1, Node* l2);

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n, m;
        
        cin>>n;
        Node* first = buildList(n);
        
        cin>>m;
        Node* second = buildList(m);
        
        Node* res = subLinkedList(first,second);
        printList(res);
    }
    return 0;
}
// } Driver Code Ends


/* Structure of linked list Node

struct Node
{
    int data;
    struct Node* next;
    
    Node(int x){
        data = x;
        next = NULL;
    }
    
};

*/

//You are required to complete this method
Node* SUB(Node*L1,Node*L2,int *carry)
{   
     if(L1==NULL)
     {
         return NULL;
     }
     Node*A=SUB(L1->next,L2->next,carry);
     L1->data=L1->data-*carry;
     if(L1->data<L2->data)
     {
         L1->data=L1->data+10;
         *carry=1;
     }
     else
     {
         *carry=0;
     }
     Node*D=new Node(L1->data-L2->data);
     D->next=A;
     return D;
}
Node* append(Node*L,int n)
{
    while(n--)
    {
        Node*X=new Node(0);
        X->next=L;
        L=X;
    }
    return L;
}
int getLength(Node*l1)
{
    Node*L=l1;
    int n=0;
    while(l1!=NULL)
    {
        n++;
        l1=l1->next;
    }
    return n;
}
int Big(Node*l1,Node*l2)
{
    while(l1->data==l2->data)
    {
        l1=l1->next;
        l2=l2->next;
        if((l1==NULL)&&(l2==NULL))
        {
            return 0;
        }
        else if(l1==NULL)
        {
            return -1;
        }
        else if(l2==NULL)
        {
            return 1;
        }
    }
    if(l1->data>l2->data)
    {
        return 1;
    }
    return -1;
}
Node* subLinkedList(Node* l1, Node* l2)
{  Node*R;
   int carry=0;    
   int K=getLength(l1);
   int K2=getLength(l2);
   if((l1==NULL)&&(l2==NULL))
   {
       return NULL;
   }
   else if(l1==NULL)
   {
       return l2;
   }
   else if(l2==NULL)
   {
       return l1;
   }
  if(K<K2)
  {
      l1=append(l1,K2-K);
  }
  else if(K2<K)
  {
      l2=append(l2,K-K2);
  }
  if(Big(l1,l2)==0)
  {
      return new Node(0);
  }
  else if(Big(l1,l2)==1)
  {
      R=SUB(l1,l2,&carry);
  }
  else
  {
      R=SUB(l2,l1,&carry);
  }
  while(R->data==0)
  {
      R=R->next;
  }
return R;
}