Given an expression string x. Examine whether the pairs and the orders of “{“,”}”,”(“,”)”,”[“,”]” are correct in exp.
For example, the function should return 'true' for exp = “[()]{}{[()()]()}” and 'false' for exp = “[(])”.

Example 1:

Input:
{([])}
Output: 
true
Explanation: 
{ ( [ ] ) }. Same colored brackets can form 
balaced pairs, with 0 number of 
unbalanced bracket.


  bool ispar(string x)
    {
        stack<char>s;
        for(int i=0;i<x.length();i++)
        {
            if(x[i]=='{' || x[i]=='[' || x[i]=='(')
            {
                s.push(x[i]);
            }
            else
            {
                if(s.empty())
                {
                    return false;
                }
                else
                {
                    if(x[i]=='}' && s.top()!='{')
                    {
                        return false;
                    }
                    if(x[i]==']' && s.top()!='[')
                    {
                        return false;
                    }
                    if(x[i]==')' && s.top()!='(')
                    {
                        return false;
                    }
                    s.pop();
                }
            }
        }
        if(s.empty())
        {
        return true;
        }
        return false;
    }