class Solution{
	public:
	/*  Function to find the number of strongly connected components
    *   using Kosaraju's algorithm
    *   V: number of vertices
    *   adj[]: array of vectors to represent graph
    */
    void S(int i,int visited[],vector<int>adj[],stack<int>&s)
    {
        visited[i]=1;
        for(int k=0;k<adj[i].size();k++)
        {
            if(!visited[adj[i][k]])
            {
                S(adj[i][k],visited,adj,s);
            }
        }
      
        s.push(i);
    }
    void DFSEREC(vector<int>adj[],int v[],int i)
    {
        v[i]=1;
        for(int k=0;k<adj[i].size();k++)
        {
            if(!v[adj[i][k]])
            {
                 DFSEREC(adj,v,adj[i][k]);
            }
        }
    }
    int kosaraju(int V, vector<int> adj[]) {
            int visited[V]={0};
            stack<int>A;
            for(int i=0;i<V;i++)
            {
                if(!visited[i])
                {
                    S(i,visited,adj,A);
                }
            }
            vector<int>B[V];
            for(int i=0;i<V;i++)
            {
                for(int j=0;j<adj[i].size();j++)
                {
                    B[adj[i][j]].push_back(i);
                }
            }
            int v[V]={0};
            int count=0;
            while(A.empty()==false)
            {
                if(!v[A.top()])
                {
                    int x=A.top();
                    DFSEREC(B,v,x);
                    count++;
                }
                A.pop();
            }
            return count;
    }