Given a 2D board of letters and a word. Check if the word exists in the board. The word can be constructed from letters of adjacent cells only. ie - horizontal or vertical neighbors. The same letter cell can not be used more than once.
 

Example 1:

Input: board = {{a,g,b,c},{q,e,e,l},{g,b,k,s}},
word = "geeks"
Output: 1
Explanation: The board is-
a g b c
q e e l
g b k s
The letters which are used to make the
"geeks" are colored.


 bool BFS(vector<int>V[],int i,int I,int J,vector<vector<char>>& board, string word)
    {
        if(i==word.length())
        {
            return true;
        }
        if(I<0 || I>=board.size() || J<0 || J>=board[0].size() || V[I][J] || board[I][J]!=word[i])
        {
            return false;
        }
        V[I][J]=1;
        int X[4]={-1,1,0,0};
        int Y[4]={0,0,-1,1};
        for(int k=0;k<4;k++)
        {
            int x=I+X[k];
            int y=J+Y[k];
            
            if(BFS(V,i+1,x,y,board,word))
              {
                        return true;
              }
        }
        V[I][J]=0;  // focus on this Mr AJ
        return false;
    }
    bool isWordExist(vector<vector<char>>& board, string word) {
        int X=board.size();
        int Y=board[0].size();
        vector<int>V[X];
        for(int i=0;i<X;i++)
        {
            for(int j=0;j<Y;j++)
            {
                V[i].push_back(0);
            }
        }
        for(int i=0;i<X;i++)
        {
            for(int j=0;j<Y;j++)
            {
                if(board[i][j]==word[0])
                {
                    if(BFS(V,0,i,j,board,word))
                    {
                        return true;
                    }
                }
            }
        }
        return false;
    }