Given a binary tree with a value associated with each node, we need to choose a subset of these nodes such that sum of chosen nodes is maximum under a constraint that no two chosen node in subset should be directly connected that is, if we have taken a node in our sum then we canâ€™t take its any children in consideration and vice versa.

                                               

Example 1:

Input:
     11
    /  \
   1    2
Output: 11
Explanation: The maximum sum is sum of
node 11.


int getMaxSum(Node *root) 
{
    if(root==NULL)
    {
        return 0;
    }
    int In=root->data;
    int EX=getMaxSum(root->left)+getMaxSum(root->right);
    if(root->left!=NULL)
    {
        In+=getMaxSum(root->left->left)+getMaxSum(root->left->right);
    }
    if(root->right!=NULL)
    {
        In+=getMaxSum(root->right->left)+getMaxSum(root->right->right);
    }
    return max(EX,In);
}