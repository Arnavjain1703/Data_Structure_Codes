Given a binary tree and a leaf node called target. Find the minimum time required to burn the complete binary tree if the target is set on fire. It is known that in 1 second all nodes connected to a given node get burned. That is, its left child, right child and parent.

Example 1:

Input :      
          1
        /   \
      2      3
    /  \      \
   4    5      6
       / \      \
      7   8      9
                   \
                   10

Target Node = 8
Output: 7
Explanation: If leaf with the value 
8 is set on fire. 
After 1 sec: 5 is set on fire.
After 2 sec: 2, 7 are set to fire.
After 3 sec: 4, 1 are set to fire.
After 4 sec: 3 is set to fire.
After 5 sec: 6 is set to fire.
After 6 sec: 9 is set to fire.
After 7 sec: 10 is set to fire.
It takes 7s to burn the complete tree.
bool find(Node*root,int target,vector<Node*>&A)
    {
        if(root==NULL)
        {
            return false;
        }
        if(root->data==target)
        {
            A.push_back(root);
            return true;
        }
        bool L=find(root->left,target,A);
        bool R=find(root->right,target,A);
        if(L||R)
        {
            A.push_back(root);
            return true;
        }
        return false;
    }
    int DIS(Node*root)
    {
        if(root==NULL)
        {
            return INT_MIN;
        }
        if(root->left==NULL && root->right==NULL)
        {
          return 0;
        }
        int a=DIS(root->left);
        int b=DIS(root->right);
        return max(a,b)+1;
        
    }
    int minTime(Node* root, int target) 
    {
       vector<Node*>A;    
       find(root,target,A);
       vector<int>B;
       B.push_back(0);
      Node*prev=NULL;
      int S=0;
      for(int i=0;i<A.size();i++)
      {
          if(prev==NULL)
          {
              prev=A[i];
          }
          else
          {
              if(A[i]->right==prev)
              {
                  if(S==0)
                  {
                      prev->left=A[i];
                  }
                  else
                  {
                      prev->right=A[i];
                  }
                  A[i]->right=NULL;
                  S=1;
                  B.push_back(1);
              }
              else
              {
                  if(S==0)
                  {
                      prev->left=A[i];
                  }
                  else
                  {
                      prev->right=A[i];
                  }
                  A[i]->left=NULL;
                  S=0;
                  B.push_back(0);
              }
              prev=A[i];
          }
           
      }
    return DIS(A[0]);
    }