Given a binary tree in which each node element contains a number. Find the maximum possible sum from one leaf node to another leaf node.

NOTE: Here Leaf node is a node which is connected to exactly one different node.
Example 1:

Input :      
           3                               
         /    \                          
       4       5                     
      /  \      
    -10   4                          
Output: 16
Explanation :
Maximum Sum lies between leaf node 4 and 5.
4 + 4 + 3 + 5 = 16.

    int DFS(Node*root,int*Max)
    {
        if(root==NULL)
        {
            return 0;
        }
        if(root->left==NULL && root->right==NULL)
        {
            return root->data;
        }
        int a=DFS(root->left,Max);
        int b=DFS(root->right,Max);
        // cout<<root->data<<" "<<a<<" "<<b<<'\n';
        if(root->left==NULL)
        {
            // *Max=max(*Max,b+root->data);
            return b+root->data;
        }
        if(root->right==NULL)
        {
            // *Max=max(*Max,a+root->data);
            return a+root->data;
        }
        *Max=max(*Max,a+b+root->data);
        a+=root->data;
        b+=root->data;
        return max(a,b);
    }
    int maxPathSum(Node* root)
    {
       int Max=INT_MIN;
       if(root->left==NULL)
       {
           Node*h=new Node(0);
           root->left=h;
       }
       if(root->right==NULL)
       {
           Node*h=new Node(0);
           root->right=h;
       }
       DFS(root,&Max);
       return Max;
    }